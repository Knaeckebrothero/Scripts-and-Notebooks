# Use butane to generate the ignition file
# Windows command: butane --pretty --strict config.bu --output config.ign
variant: fcos
version: 1.5.0

# User configuration
passwd:
  users:
    - name: core # CoreOS user with sudo privileges and SSH key for remote access
      ssh_authorized_keys:
        - ssh-ed25519 SSH_KEY_GOES_HERE MAIL_ADDRESS_GOES_HERE
    
    # Additional users for services
    - name: node_exporter_user
    - name: k3s_user

# System services configuration
systemd:
  units:
    # Setup daily reboot timer (reboots at 03:00 every day, gmt timezone)
    - name: daily-restart.timer
      enabled: true
      contents: |
        [Unit]
        Description=Daily Restart

        [Timer]
        OnCalendar=*-*-* 03:00:00
        Persistent=true

        [Install]
        WantedBy=multi-user.target
    - name: daily-restart.service
      enabled: true
      contents: |
        [Unit]
        Description=Trigger Daily Restart

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl reboot

        [Install]
        # This line is commented out to prevent the service from starting at boot
        # WantedBy=multi-user.target
        WantedBy=timer.target

    # Install and start node exporter
    - name: node-exporter-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Node Exporter
        After=network-online.target
        Wants=network-online.target
        Before=node-exporter.service

        [Service]
        Type=oneshot
        User=node_exporter_user
        ExecStart=/bin/sh -c 'set -x; cd /tmp; /usr/bin/curl -sfL -LO https://github.com/prometheus/node_exporter/releases/download/v1.8.0/node_exporter-1.8.0.linux-amd64.tar.gz && tar xvfz node_exporter-1.8.0.linux-amd64.tar.gz && cp node_exporter-1.8.0.linux-amd64/node_exporter /usr/local/bin/node_exporter && rm -rf node_exporter-1.8.0.linux-amd64*'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: node-exporter.service
      enabled: true
      contents: |
        [Unit]
        Description=Node Exporter
        After=network-online.target
        Wants=network-online.target

        [Service]
        User=node_exporter_user
        ExecStart=/usr/local/bin/node_exporter
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Install and start Kubernetes
    - name: k3s-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s
        After=network-online.target
        Requires=network-online.target
        Before=k3s.service

        [Service]
        Type=oneshot
        User=k3s_user
        ExecStart=/bin/sh -c '/usr/bin/curl -sfL https://get.k3s.io | sh'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: k3s.service
      enabled: true
      contents: |
        [Unit]
        Description=Lightweight Kubernetes
        After=network-online.target
        Wants=network-online.target
        Requires=k3s-install.service

        [Service]
        Type=simple
        User=k3s_user
        ExecStart=/usr/local/bin/k3s server
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Setup zincati update service
    - name: zincati.service
      enabled: true
      contents: |
        [Unit]
        Description=Zincati Update Service
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStart=/usr/libexec/zincati agent -v
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

# Storage configuration
storage:
  disks:
    - device: /dev/disk/by-id/coreos-boot-disk
      wipe_table: false
      partitions:
      - number: 4
        label: root
        size_mib: 32768 # At least 8192
        resize: true
      - size_mib: 0
        label: var

  # Configure file systems and mount them on the previously configured hard drives
  filesystems:
    - path: /var
      device: /dev/disk/by-partlabel/var
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true

  # Create working directories
  directories:
    # - path: /var/...
  
  # Create configuration files
  files:
    - path: /etc/zincati/config.d/90-custom.toml
      overwrite: true
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          periodic.interval_minutes = 1440 # Checks for updates every 24h

          [updates.allow_downgrade]
          enabled = false  # Avoid downgrades

          [reboot]
          strategy = "off" # Disable reboot, since server reboots on daily basis anyway
      mode: 0755
      