# Use butane to generate the ignition file
# Windows command: butane --pretty --strict config.bu --output config.ign
variant: fcos
version: 1.5.0

# User configuration
passwd:
  users:
    # CoreOS user with sudo privileges and SSH key for remote access
    - name: core 
      ssh_authorized_keys:
        - ssh-ed25519 SSH_KEY_GOES_HERE MAIL_ADDRESS_GOES_HERE
    
    # Additional service users
    - name: node_exporter_user
      system: true
    - name: k3s_user
      system: true

# System services configuration
systemd:
  units:
    # Setup daily reboot timer (reboots at 03:00 every day, gmt timezone)
    - name: daily-restart.timer
      enabled: true
      contents: |
        [Unit]
        Description=Daily Restart

        [Timer]
        OnCalendar=*-*-* 03:00:00
        Persistent=true

        [Install]
        WantedBy=multi-user.target
    - name: daily-restart.service
      enabled: true
      contents: |
        [Unit]
        Description=Trigger Daily Restart

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl reboot

        [Install]
        # This line is commented out to prevent the service from starting at boot
        # WantedBy=multi-user.target
        WantedBy=timer.target

    # Install and start node exporter
    - name: node-exporter-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Node Exporter
        After=network-online.target
        Wants=network-online.target
        Before=node-exporter.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '\
          set -x; cd /tmp; /usr/bin/curl -sfL -LO https://github.com/prometheus/node_exporter/releases/download/v1.8.0/node_exporter-1.8.0.linux-amd64.tar.gz && \
          tar xvfz node_exporter-1.8.0.linux-amd64.tar.gz && \
          cp node_exporter-1.8.0.linux-amd64/node_exporter /usr/local/bin/node_exporter && \
          rm -rf node_exporter-1.8.0.linux-amd64*'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: node-exporter.service
      enabled: true
      contents: |
        [Unit]
        Description=Node Exporter
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        User=node_exporter_user
        ExecStart=/usr/local/bin/node_exporter
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Install and start Kubernetes
    - name: k3s-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s
        After=network-online.target
        Requires=network-online.target
        Before=k3s.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '/usr/bin/curl -sfL https://get.k3s.io | sh'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: k3s.service
      enabled: true
      contents: |
        [Unit]
        Description=Lightweight Kubernetes
        After=network-online.target
        Wants=network-online.target
        Requires=k3s-install.service

        [Service]
        Type=simple
        User=k3s_user
        ExecStart=/usr/local/bin/k3s server --config /etc/rancher/k3s/config.yaml
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Install the metrics server for k3s (required for autoscaling)
    - name: k3s-install-metrics-server.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s metrics server
        After=network-online.target
        Requires=k3s.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '\
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml | sh'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Install longhorn for k3s (persistent storage)
    - name: k3s-install-longhorn.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Longhorn
        After=k3s.service
        Requires=k3s.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '\
          kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/master/deploy/longhorn.yaml && \
          sleep 60 && \
          kubectl apply -f /etc/rancher/k3s/longhorn-config.yaml && \
          kubectl apply -f /etc/rancher/k3s/longhorn-node-config.yaml'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Install the vertical pod autoscaler for k3s
    - name: k3s-install-vertical-pod-autoscaler.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Vertical Pod Autoscaler
        After=k3s.service
        Requires=k3s.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '\
          git clone https://github.com/kubernetes/autoscaler.git && \
          cd autoscaler/vertical-pod-autoscaler/ && \
          ./hack/vpa-up.sh'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Install the Rancher Dashboard for k3s
    - name: k3s-install-rancher-dashboard.service
      enabled: true
      contents: |
        [Unit]
        Description=Deploy Rancher Dashboard
        After=k3s.service
        Requires=k3s.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '\
          kubectl create namespace cattle-system && \
          kubectl apply -f https://raw.githubusercontent.com/rancher/rancher/latest/manifest-rancher.yaml -n cattle-system'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Setup zincati update service
    - name: zincati.service
      enabled: true
      contents: |
        [Unit]
        Description=Zincati Update Service
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        ExecStart=/usr/libexec/zincati agent -v
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

# Storage configuration
storage:
  disks:
    # Configure the main hard drive for the operating system
    - device: /dev/disk/by-id/coreos-boot-disk
      wipe_table: false
      partitions:
      - number: 4 # This is the root partition where the OS is installed
        label: root
        size_mib: 32768 # At least 8192
        resize: true
      - size_mib: 0 # This is the var partition, which will take up the rest of the disk
        label: var
    
    # Configure additional hard drives for Longhorn to use as storage
    - device: /dev/sda
      wipe_table: true
      label: sda-ssd-2tb
    - device: /dev/sdb
      wipe_table: true
      label: sdb-ssd-2tb
    - device: /dev/sdc
      wipe_table: true
      label: sdc-hdd-4tb
    - device: /dev/sdd
      wipe_table: true
      label: sdd-hdd-4tb
    - device: /dev/sde
      wipe_table: true
      label: sde-ssd-1tb
    - device: /dev/sdf
      wipe_table: true
      label: sdf-ssd-1tb

  # Configure file systems and mount them on the previously configured hard drives
  filesystems:
    - path: /var
      device: /dev/disk/by-partlabel/var
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true

  # Create directories if needed
  directories:
    - path: /var/longhorn
  
  # Create files
  files:    
    # Config file for zincati
    - path: /etc/zincati/config.d/90-custom.toml
      overwrite: true
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          periodic.interval_minutes = 1440 # Checks for updates every 24h

          [updates.allow_downgrade]
          enabled = false  # Avoid downgrades

          [reboot]
          strategy = "off" # Disable reboot, since server reboots on daily basis anyway
      mode: 0644
      user:
        name: root
      group:
        name: root

    # Config file for k3s
    - path: /etc/rancher/k3s/config.yaml
      overwrite: true
      contents:
        inline: |
          node-name: k3s-server
          tls-san:
            - YOUR_IP_DOMAIN_GOES_HERE
          kube-apiserver-arg:
            - "allow-privileged=true"
          kubelet-arg:
            - "max-pods=64"
          cluster-cidr: "10.42.0.0/16"
          service-cidr: "10.43.0.0/16"
          cluster-dns: "10.43.0.10"
      mode: 0644
      user:
        name: root
      group:
        name: root

    # Config file for longhorn
    - path: /etc/rancher/k3s/longhorn-config.yaml
      overwrite: true
      contents:
        inline: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: longhorn-storageclass
            namespace: longhorn-system
          data:
            storageclass.yaml: |
              kind: StorageClass
              apiVersion: storage.k8s.io/v1
              metadata:
                name: longhorn-ssd
              provisioner: driver.longhorn.io
              parameters:
                numberOfReplicas: "2"
                staleReplicaTimeout: "2880"
                fromBackup: ""
                diskSelector: "ssd"
              allowVolumeExpansion: true
            default-setting.yaml: |
              apiVersion: longhorn.io/v1beta2
              kind: Setting
              metadata:
                name: default-setting
                namespace: longhorn-system
              spec:
                default-data-path: /var/longhorn
                default-data-locality: disabled
                replica-soft-anti-affinity: false
                storage-minimal-available-percentage: "25"
                upgrade-checker: false
                default-replica-count: 2
                guaranteed-instance-manager-cpu: 20
                default-longhorn-static-storage-class: longhorn-ssd
                backup-target: s3://your-backup-bucket@region/
                backup-target-credential-secret: longhorn-backup-secret
                create-default-disk-labeled-nodes: true
                node-down-pod-deletion-policy: delete-both-statefulset-and-deployment-pod
      mode: 0644
      user:
        name: root
      group:
        name: root

    # Config file for longhorn node
    - path: /etc/rancher/k3s/longhorn-node-config.yaml
      overwrite: true
      contents:
        inline: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: longhorn-node-config
            namespace: longhorn-system
          data:
            node-config.yaml: |
              kind: ConfigMap
              apiVersion: v1
              metadata:
                name: node-config
                namespace: longhorn-system
              data:
                default-data-path: "/var/longhorn/"
                nodes:
                  k3s-server:
                    disks:
                      sda-ssd-2tb:
                        path: /dev/sda
                        allowScheduling: true
                        storageReserved: 10Gi
                        tags:
                          - ssd
                      sdb-ssd-2tb:
                        path: /dev/sdb
                        allowScheduling: true
                        storageReserved: 10Gi
                        tags:
                          - ssd
                      sdc-hdd-4tb:
                        path: /dev/sdc
                        allowScheduling: true
                        storageReserved: 10Gi
                        tags:
                          - hdd
                      sdd-hdd-4tb:
                        path: /dev/sdd
                        allowScheduling: true
                        storageReserved: 10Gi
                        tags:
                          - hdd
                      sde-ssd-1tb:
                        path: /dev/sde
                        allowScheduling: true
                        storageReserved: 10Gi
                        tags:
                          - ssd
                      sdf-ssd-1tb:
                        path: /dev/sdf
                        allowScheduling: true
                        storageReserved: 10Gi
                        tags:
                          - ssd
      mode: 0644
      user:
        name: root
      group:
        name: root
