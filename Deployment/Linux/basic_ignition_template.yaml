# Use butane to generate the ignition file
# Windows command: butane --pretty --strict config.bu --output config.ign
variant: fcos
version: 1.5.0

# User configuration
passwd:
  users:
    # CoreOS user with sudo privileges and SSH key for remote access
    - name: core 
      ssh_authorized_keys:
        - ssh-ed25519 SSH_KEY_GOES_HERE MAIL_ADDRESS_GOES_HERE
    
    # Additional service users
    - name: node_exporter_user
      system: true

# System services configuration
systemd:
  units:
    # Disable cloud-init services
    - name: nm-cloud-setup.service
      mask: true
    - name: nm-cloud-setup.timer
      mask: true

    # Setup daily reboot timer (reboots at 03:00 every day, gmt timezone)
    - name: daily-restart.timer
      enabled: true
      contents: |
        [Unit]
        Description=Daily Restart

        [Timer]
        OnCalendar=*-*-* 03:00:00
        Persistent=true

        [Install]
        WantedBy=multi-user.target

    # Setup a service that get's triggered by the timer to reboot the system
    - name: daily-restart.service
      enabled: true
      contents: |
        [Unit]
        Description=Trigger Daily Restart

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl reboot

        [Install]
        WantedBy=timer.target

    # Install a node exporter for prometheus monitoring
    - name: node-exporter-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Node Exporter
        After=network-online.target
        Wants=network-online.target
        Before=node-exporter.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '\
          set -x; cd /tmp; /usr/bin/curl -sfL -LO https://github.com/prometheus/node_exporter/releases/download/v1.8.0/node_exporter-1.8.0.linux-amd64.tar.gz && \
          tar xvfz node_exporter-1.8.0.linux-amd64.tar.gz && \
          cp node_exporter-1.8.0.linux-amd64/node_exporter /usr/local/bin/node_exporter && \
          rm -rf node_exporter-1.8.0.linux-amd64*'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Setup a service to start the node exporter
    - name: node-exporter.service
      enabled: true
      contents: |
        [Unit]
        Description=Node Exporter
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        User=node_exporter_user
        ExecStart=/usr/local/bin/node_exporter
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Install and configure kubernetes
    - name: k3s-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        # Use this for the first server node
        Environment="INSTALL_K3S_EXEC=server --cluster-init --tls-san SERVER_NODE_1_IP,SERVER_NODE_2_IP,SERVER_NODE_3_IP"
        
        # Use this for additional server nodes (comment out the above line and uncomment these for additional nodes)
        #Environment="INSTALL_K3S_EXEC=server --server https://SERVER_NODE_1_IP:6443"
        #Environment="K3S_TOKEN=YOUR_NODE_TOKEN"

        ExecStart=/bin/sh -c 'curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC" K3S_TOKEN="$K3S_TOKEN" sh -s - --write-kubeconfig-mode 644'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Setup zincati update service
    - name: zincati.service
      enabled: true
      contents: |
        [Unit]
        Description=Zincati Update Service
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        ExecStart=/usr/libexec/zincati agent -v
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

# Storage configuration
storage:
  disks:
    # Configure the main hard drive for the operating system
    - device: /dev/disk/by-id/coreos-boot-disk
      wipe_table: false
      partitions:
      - number: 4 # This is the root partition where the OS is installed
        label: root
        size_mib: 32768 # At least 8192
        resize: true
      - size_mib: 0 # This is the var partition, which will take up the rest of the disk
        label: var
    
    # Configure additional hard drives for Longhorn to use as storage
    - device: /dev/sda
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: sda-ssd-2000
    - device: /dev/sdb
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: sdb-ssd-2000
    - device: /dev/sdc
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: sdc-hdd-4000
    - device: /dev/sdd
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: sdd-hdd-4000
    - device: /dev/sde
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: sde-ssd-1000
    - device: /dev/sdf
      wipe_table: true
      - size_mib: 0
        start_mib: 0
        label: sdf-ssd-1000

  # Configure file systems and mount them on the previously configured hard drives
  filesystems:
    # Mount the root partition
    - path: /var
      device: /dev/disk/by-partlabel/var
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
  
    # Mount the additional hard drives
    - path: /var/longhorn/sda-ssd-2000
      device: /dev/disk/by-partlabel/sda-ssd-2000
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/longhorn/sdb-ssd-2000
      device: /dev/disk/by-partlabel/sdb-ssd-2000
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/longhorn/sdc-hdd-4000
      device: /dev/disk/by-partlabel/sdc-hdd-4000
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/longhorn/sdd-hdd-4000
      device: /dev/disk/by-partlabel/sdd-hdd-4000
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/longhorn/sde-ssd-1000
      device: /dev/disk/by-partlabel/sde-ssd-1000
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/longhorn/sdf-ssd-1000
      device: /dev/disk/by-partlabel/sdf-ssd-1000
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
  
  # Create directories
  directories:
    - path: /var/longhorn
      mode: 0755

  # Create files
  files:
    # Set the hostname
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: worker-node-1

    # Config file for zincati
    - path: /etc/zincati/config.d/90-custom.toml
      overwrite: true
      mode: 0644
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          periodic.interval_minutes = 1440 # Checks for updates every 24h

          [updates.allow_downgrade]
          enabled = false  # Avoid downgrades

          [reboot]
          strategy = "off" # Disable reboot, since server reboots on daily basis anyway
